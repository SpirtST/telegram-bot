# -*- coding: utf-8 -*-
import os
BOT_TOKEN = os.getenv("7828617294:AAEk-WlSN2ZJlttlvNdqF0XQr1hKu0IUAdc")  # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMINS = list(map(int, os.getenv("222771008").split(",")))  # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
import secrets
import time

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
EDITORS = {}  # {user_id: {"username": str, "invite_code": str, "added_by": int}}
NUMBERS_DB = []
USER_STATES = {}
INVITES = {}  # {"–∫–æ–¥": {"admin_id": int, "username": str, "expires": float}}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ /start invite_–∫–æ–¥
    if args and args[0].startswith('invite_'):
        invite_code = args[0][7:]
        await handle_invite_start(update, context, user_id, invite_code)
        return
    
    # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    buttons = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ")],
        [KeyboardButton("ü™û –ó–µ—Ä–∫–∞–ª–∫–∏"), KeyboardButton("üî¢ –¢—Ä–æ–π–Ω—ã–µ")],
        [KeyboardButton("üü∞ –†–æ–≤–Ω—ã–µ"), KeyboardButton("‚ú® –ö—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–≤—ã")]
    ]
    
    if user_id in ADMINS or user_id in EDITORS:
        buttons.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä")])
    if user_id in ADMINS:
        buttons.append([KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    await update.message.reply_text(
        "üöó –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

async def handle_invite_start(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, invite_code: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º"""
    if invite_code not in INVITES:
        await update.message.reply_text("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!")
        return
    
    if INVITES[invite_code]["expires"] < time.time():
        await update.message.reply_text("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç—ë–∫!")
        del INVITES[invite_code]
        return
    
    username = update.effective_user.username
    if not username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å username –≤ Telegram!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    EDITORS[user_id] = {
        "username": username.lower(),
        "invite_code": invite_code,
        "added_by": INVITES[invite_code]["admin_id"]
    }
    
    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    del INVITES[invite_code]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    admin_id = EDITORS[user_id]["added_by"]
    try:
        await context.bot.send_message(
            chat_id=admin_id,
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ —Ç–µ–ø–µ—Ä—å —Ä–µ–¥–∞–∫—Ç–æ—Ä!"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    await update.message.reply_text(
        "üéâ –¢–µ–ø–µ—Ä—å –≤—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–æ—Ç–∞!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/start")]], resize_keyboard=True)
    )

async def show_admin_panel(update: Update):
    buttons = [
        [KeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤")],
        [KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")],
        [KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")],
        [KeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é")]
    ]
    await update.message.reply_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥", "‚Ü©Ô∏è –í –º–µ–Ω—é"]:
        await start(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in USER_STATES:
        await handle_user_state(update, context, user_id, text)
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000-5000):")
    
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä":
        if user_id not in ADMINS and user_id not in EDITORS:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return
        USER_STATES[user_id] = {"step": "waiting_number"}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (—Ñ–æ—Ä–º–∞—Ç: –ê123–ê–ê –∏–ª–∏ –ê123–ê–ê77):")
    
    elif text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        if user_id not in ADMINS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
            return
        await show_admin_panel(update)
    
    elif text == "üë• –°–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤":
        if user_id not in ADMINS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
            return
        
        editors_list = []
        for editor_id, data in EDITORS.items():
            status = f"üë§ @{data['username']} (–¥–æ–±–∞–≤–∏–ª: {data['added_by']})"
            editors_list.append(status)
        
        response = "–¢–µ–∫—É—â–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã:\n" + "\n".join(editors_list) if editors_list else "–ù–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤"
        await update.message.reply_text(response)
    
    elif text == "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ":
        if user_id not in ADMINS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        invite_code = secrets.token_hex(8)
        INVITES[invite_code] = {
            "admin_id": user_id,
            "username": None,
            "expires": time.time() + 86400  # 24 —á–∞—Å–∞
        }
        
        invite_link = f"https://t.me/{context.bot.username}?start=invite_{invite_code}"
        
        await update.message.reply_text(
            "üîê –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"–ö–æ–¥: <code>{invite_code}</code>\n"
            f"–°—Å—ã–ª–∫–∞: {invite_link}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.",
            parse_mode="HTML"
        )
    
    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞":
        if user_id not in ADMINS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
            return
        
        USER_STATES[user_id] = {"step": "waiting_editor_remove"}
        buttons = [[KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]]
        
        editors_list = []
        for editor_id, data in EDITORS.items():
            editors_list.append([KeyboardButton(f"üë§ @{data['username']} (—É–¥–∞–ª–∏—Ç—å)")])
        
        if not editors_list:
            await update.message.reply_text("–ù–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        buttons = editors_list + [[KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]]
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )
    
    elif "-" in text:
        await handle_price_search(update, text)
    
    elif text in ["ü™û –ó–µ—Ä–∫–∞–ª–∫–∏", "üî¢ –¢—Ä–æ–π–Ω—ã–µ", "üü∞ –†–æ–≤–Ω—ã–µ", "‚ú® –ö—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–≤—ã"]:
        await handle_category_search(update, text)

async def handle_user_state(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, text: str):
    state = USER_STATES[user_id]
    
    if text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞":
        del USER_STATES[user_id]
        await show_admin_panel(update) if user_id in ADMINS else await start(update, context)
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    if state["step"] == "waiting_editor_remove":
        if text.startswith("üë§ @"):
            username = text.split("@")[1].split(" ")[0]
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ username
            editor_id = next((uid for uid, data in EDITORS.items() if data["username"] == username.lower()), None)
            
            if editor_id:
                del EDITORS[editor_id]
                await update.message.reply_text(
                    f"‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä @{username} —É–¥–∞–ª—ë–Ω!",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]], resize_keyboard=True)
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –†–µ–¥–∞–∫—Ç–æ—Ä @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]], resize_keyboard=True)
                )
        else:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞")
        
        del USER_STATES[user_id]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    elif state["step"] == "waiting_number":
        if not (len(text) in [6, 8] and 
                text[:1].isalpha() and 
                text[1:4].isdigit() and 
                text[4:6].isalpha() and
                (len(text) == 6 or text[6:].isdigit())):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä—ã: –ê123–ê–ê –∏–ª–∏ –ê123–ê–ê77")
            return
        
        state["number"] = text.upper()
        state["step"] = "waiting_price"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    
    elif state["step"] == "waiting_price":
        if not text.isdigit():
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        state["price"] = int(text)
        state["step"] = "waiting_types"
        state["selected_types"] = []
        
        buttons = [
            [KeyboardButton("ü™û –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π")],
            [KeyboardButton("üî¢ –¢—Ä–æ–π–Ω–æ–π")],
            [KeyboardButton("üü∞ –†–æ–≤–Ω—ã–π")],
            [KeyboardButton("‚ú® –ö—Ä–∞—Å–∏–≤—ã–π")],
            [KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ")]
        ]
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ (–Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑):\n"
            "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(state["selected_types"]) if state["selected_types"] else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )
    
    elif state["step"] == "waiting_types":
        type_map = {
            "ü™û –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π": "–∑–µ—Ä–∫–∞–ª—å–Ω—ã–π",
            "üî¢ –¢—Ä–æ–π–Ω–æ–π": "—Ç—Ä–æ–π–Ω–æ–π",
            "üü∞ –†–æ–≤–Ω—ã–π": "—Ä–æ–≤–Ω—ã–π",
            "‚ú® –ö—Ä–∞—Å–∏–≤—ã–π": "–∫—Ä–∞—Å–∏–≤—ã–π"
        }
        
        if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            if not state["selected_types"]:
                await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø!")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑—É
            NUMBERS_DB.append({
                "number": state["number"],
                "price": state["price"],
                "types": state["selected_types"],
                "added_by": user_id
            })
            
            del USER_STATES[user_id]
            await update.message.reply_text(
                f"‚úÖ –ù–æ–º–µ—Ä {state['number']} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"–¢–∏–ø—ã: {', '.join(state['selected_types'])}",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/start")]], resize_keyboard=True)
            )
        elif text in type_map:
            type_name = type_map[text]
            if type_name in state["selected_types"]:
                state["selected_types"].remove(type_name)
            else:
                state["selected_types"].append(type_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º
            buttons = [
                [KeyboardButton("ü™û –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π")],
                [KeyboardButton("üî¢ –¢—Ä–æ–π–Ω–æ–π")],
                [KeyboardButton("üü∞ –†–æ–≤–Ω—ã–π")],
                [KeyboardButton("‚ú® –ö—Ä–∞—Å–∏–≤—ã–π")],
                [KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ")]
            ]
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤:\n"
                f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(state['selected_types']) if state['selected_types'] else '–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )

async def handle_price_search(update: Update, text: str):
    try:
        price_from, price_to = map(int, text.split("-"))
        results = [n for n in NUMBERS_DB if price_from <= n["price"] <= price_to]
        
        if not results:
            await update.message.reply_text("‚ùå –ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
            return
            
        response = "üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(
            f"{n['number']} - {n['price']} —Ä—É–±. (–¢–∏–ø—ã: {', '.join(n['types'])})"
            for n in sorted(results, key=lambda x: x["price"])
        )
        await update.message.reply_text(response)
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ '–æ—Ç-–¥–æ' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000-5000)")

async def handle_category_search(update: Update, category: str):
    category_map = {
        "ü™û –ó–µ—Ä–∫–∞–ª–∫–∏": "–∑–µ—Ä–∫–∞–ª—å–Ω—ã–π",
        "üî¢ –¢—Ä–æ–π–Ω—ã–µ": "—Ç—Ä–æ–π–Ω–æ–π",
        "üü∞ –†–æ–≤–Ω—ã–µ": "—Ä–æ–≤–Ω—ã–π",
        "‚ú® –ö—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–≤—ã": "–∫—Ä–∞—Å–∏–≤—ã–π"
    }
    category_name = category_map[category]
    
    results = [n for n in NUMBERS_DB if category_name in n["types"]]
    
    if not results:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        return
        
    response = f"üìã {category}:\n" + "\n".join(
        f"{n['number']} - {n['price']} —Ä—É–±. (–¢–∏–ø—ã: {', '.join(n['types'])})"
        for n in sorted(results, key=lambda x: x["price"])
    )
    await update.message.reply_text(response)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("accept_invite_"):
        invite_code = query.data.split("_")[2]
        user_id = query.from_user.id
        username = query.from_user.username

        if not username:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å username –≤ Telegram!")
            return

        if invite_code not in INVITES:
            await query.edit_message_text("‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        EDITORS[user_id] = {
            "username": username.lower(),
            "invite_code": invite_code,
            "added_by": INVITES[invite_code]["admin_id"]
        }

        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        del INVITES[invite_code]

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_id = EDITORS[user_id]["added_by"]
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
            )
        except:
            pass

        await query.edit_message_text(
            "üéâ –¢–µ–ø–µ—Ä—å –≤—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–æ—Ç–∞!\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        )

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    application.run_polling()

if __name__ == "__main__":
    main()
